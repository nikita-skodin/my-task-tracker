openapi: 3.1.0
info:
  title: Task Tracker definition
  description: Documentation for Task Tracker API
  version: v1.0
servers:
  - url: http://localhost:8080
    description: Main url

paths:
  /api/auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        description: User registration request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Invalid data response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/authenticate:
    post:
      summary: Authenticate a user
      tags:
        - Authentication
      requestBody:
        description: User authentication request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Incorrect data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      summary: Refresh authentication token
      tags:
        - Authentication
      requestBody:
        description: User`s refresh token
        required: true
        content:
          application/text:
            schema:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '403':
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/enable/{code}:
    get:
      summary: Enable user account using activation code
      tags:
        - Authentication
      parameters:
        - name: code
          in: path
          description: Activation code
          required: true
          schema:
            type: string
            example: fcf7303e-63d5-4a36-958a-400eec69acc8
      responses:
        '200':
          description: Account enabled successfully
          content:
            application/text:
              schema:
                type: string
                example: Account successfully activated
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  "/api/projects/{project_id}/task-states/{task-states_id}/tasks/create":
    post:
      tags:
        - task-controller
      summary: Create Task for Task State
      description: Create new Task
      operationId: createTask
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task-states_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: empty JSON taskDTO
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TaskDTO"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/projects/{project_id}/task-states/create":
    post:
      tags:
        - task-state-controller
      summary: Create Task State for project by project id and task state id
      description: Returns new Task State
      operationId: createTaskState
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
      requestBody:
        description: empty JSON taskStateDTO
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TaskStateDTO"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskStateDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/projects/create":
    post:
      tags:
        - Projects
      summary: Create new project
      description: Returns new project DTO with 3 empty Task States DTO
      operationId: createProject
      requestBody:
        description: empty JSON projectDTO with name only
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDTO"
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProjectDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/users/update/{id}":
    patch:
      tags:
        - user-controller
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"

  "/api/projects/{project_id}/task-states/{task-states_id}/tasks/update/{task_id}":
    patch:
      tags:
        - task-controller
      summary: Update Task
      description: Returns updated Task
      operationId: updateTaskById
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
        - name: task-states_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TaskDTO"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/projects/{project_id}/task-states/update/{task-state_id}":
    patch:
      tags:
        - task-state-controller
      summary: Update Task State for project by project id and task state id
      description: Returns updated Task State with Tasks. Updates all fields, but
        if you want to update order, you should change only previous elementFor adding
        new Task see TaskController
      operationId: updateProject
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task-state_id
          in: path
          description: task state id
          required: true
          schema:
            type: integer
      requestBody:
        description: JSON taskStateDTO
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TaskStateDTO"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskStateDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/projects/update/{id}":
    patch:
      tags:
        - Projects
      summary: Update project by id
      description: |
        Returns updated project with Task States. Updates only name.
        For adding new Task States see TaskStateController.
      operationId: updateProject_1
      parameters:
        - name: id
          in: path
          description: project`s id
          required: true
          schema:
            type: integer
      requestBody:
        description: empty JSON projectDTO
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDTO"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProjectDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/users/get":
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserDTO"
  "/api/users/get/{id}":
    get:
      tags:
        - user-controller
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
  "/api/users/get/me":
    get:
      tags:
        - user-controller
      operationId: getUserByToken
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
  "/api/projects/{project_id}/task-states/{task-states_id}/tasks/get":
    get:
      tags:
        - task-controller
      summary: Get Tasks for Task State by project id and task state id
      description: Returns all Tasks
      operationId: getTasks
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task-states_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TaskDTO"
  "/api/projects/{project_id}/task-states/{task-states_id}/tasks/get/{task_id}":
    get:
      tags:
        - task-controller
      summary: Get Tasks for Task State by project id, task state id and task id
      description: Returns all Tasks
      operationId: getTaskById
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
        - name: task-states_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskDTO"
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/projects/{project_id}/task-states/get":
    get:
      tags:
        - task-state-controller
      summary: Get all Task States for project by project id
      description: Returns all Task States for project
      operationId: getAllTaskStates
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TaskStateDTO"
  "/api/projects/{project_id}/task-states/get/{task-state_id}":
    get:
      tags:
        - task-state-controller
      summary: Get Task State for project by project id and task state id
      description: Returns Task State for project
      operationId: getTaskState
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task-state_id
          in: path
          description: task state id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TaskStateDTO"
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/projects/get":
    get:
      tags:
        - Projects
      summary: Get all projects
      description: Returns all projects, possibly with Task States
      operationId: getAllProjects
      parameters:
        - name: prefix
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectDTO"
  "/api/projects/get/{id}":
    get:
      tags:
        - Projects
      summary: Get project by id
      description: Returns project by id
      operationId: getProjectById
      parameters:
        - name: id
          in: query
          description: project`s id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProjectDTO"
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse"

  "/api/users/delete/{id}":
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK

  "/api/projects/{project_id}/task-states/{task-states_id}/tasks/delete/{task_id}":
    delete:
      tags:
        - task-controller
      summary: Delete Task
      description: Delete Task
      operationId: deleteTaskById
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
        - name: task-states_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 200 OK
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 400 BAD_REQUEST
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 404 NOT_FOUND
  "/api/projects/{project_id}/task-states/delete/{task-state_id}":
    delete:
      tags:
        - task-state-controller
      summary: Delete Task State for project by project id and task state id
      description: Delete Task State for project by project id and task state id
      operationId: deleteTasStateById
      parameters:
        - name: project_id
          in: path
          description: project id
          required: true
          schema:
            type: integer
        - name: task-state_id
          in: path
          description: task state id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 200 OK
        '400':
          description: Bad Request
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 400 BAD_REQUEST
        '404':
          description: Not found
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 404 NOT_FOUND
  "/api/projects/delete/{id}":
    delete:
      tags:
        - Projects
      summary: Delete project by id
      description: Delete project by id
      operationId: deleteProjectById
      parameters:
        - name: id
          in: path
          description: project`s id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 200 OK
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                type: string
                enum:
                  - 400 BAD_REQUEST

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error`s title
          example: Bad Request
        message:
          type: string
          description: Error`s message
          example: Some cause

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: User's username
          example: UserName
        password:
          type: string
          example: UserPassword123
          description: User`s password
        email:
          type: string
          format: email
          example: email@gmail.com
          description: User's email address
      required:
        - username
        - password
        - email

    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
          description: User's username
          example: Josh_J
        password:
          type: string
          example: password_password_123
          description: User`s password
      required:
        - username
        - password

    AuthenticationResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          description: access JWT token
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          description: refresh JWT token
      required:
        - access_token
        - refresh_token

    TaskDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: This is the name of task
        description:
          type: string
          example: This is the description of task
        created_at:
          type: string
          format: date-time
          readOnly: true
        task_state_id:
          type: integer
          format: int64
          readOnly: true
          example: 1
      example:
        - id: 27
          name: task1
          description: description1
          created_at: '2023-10-24T17:26:05.902537Z'
          task_state_id: 146
    TaskStateDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: This is the name of task state
        previous_task_state_id:
          type: integer
          format: int64
          example: 1
        next_task_state_id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        created_at:
          type: string
          format: date-time
          readOnly: true
        project_id:
          type: array
          readOnly: true
          example:
            - id: 27
              name: task1
              description: description1
              created_at: '2023-10-24T17:26:05.902537Z'
              task_state_id: 146
          items:
            "$ref": "#/components/schemas/TaskDTO"
      example:
        - id: 145
          name: In progress
          previous_task_state_id: 144
          next_task_state_id: 146
          created_at: '2023-10-24T17:16:43.498700Z'
          project_id: 57
          task_entities: [ ]
    ProjectDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: This is the name of project
        created_at:
          type: string
          format: date-time
          readOnly: true
        user_id:
          type: integer
          format: int64
          readOnly: true
        task_state_entities:
          type: array
          readOnly: true
          example:
            - id: 145
              name: In progress
              previous_task_state_id: 144
              next_task_state_id: 146
              created_at: '2023-10-24T17:16:43.498700Z'
              project_id: 57
              task_entities: [ ]
          items:
            "$ref": "#/components/schemas/TaskStateDTO"
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        email:
          type: string
        projects:
          type: array
          readOnly: true
          items:
            "$ref": "#/components/schemas/ProjectDTO"